<File version="3.1">
  <FileID>6802a47c-7f3f-4962-8e99-2399adb64a9f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADULSURBVHhe7d1XbJx5mu/3AQzsWRgH8IWBc+Eb
3xwfGDZ8cWwDvjFsA2ufNQzYnp2zB96ZszOzE3pmerqnc1C3WqGVpVakRIWWWhKVEyWRYg7FnIs5
VTHnnIOo/PPzf0tUsznV3ZQ0ZHfv+/0MviBZ9dZbb5XY9X9epvkRAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4Kfv++q//KvB3f/d3gR07dgW2bt0R
2EJEREQ/mLZu2xnYtGlz4L/+N/8mYOu669v9i7/6q/J33vtAueWNauieUKPV0DVORET0z7/OcVv3
xtXcO/VCNfVMPttXc+/kn12/sr7ch9tf9G2+uVDftN1+TPGJ6frv/+2/1dMl/pv9+P/9cSCnrEEV
rSMqqOtWdrBVWVZmRYuyLPdxbk2n8qxAZavVRkRE9M+inKo2ZZWHFZ9ZqRsZwefqenpQCTk1yrV9
uPXxVnZV1O2+LXc7d3u3H7c/t99o231T7vizK1pV1zWho8dPrWwA2LlzTyDUP6OcYEjvfvCx/vSn
N7V+/QZt2bJVmzZu1ocffqRf/PJXSkwLKNg6rNzqdhsGOpZll7nLv6nFbf/suqX7iXb9WrR4/9Gu
e86+8jgW97v0spfoL7kvIiJSfm2nriaVKDGrUsk51Up6jpLzanQjpVSJtmjftAX4dka5knNrnl2f
klerjOKmr5Re2PDVfdj27nbu9m4/bn9uv8+uf7qP9MLGyP6KGpVuLb2f5Nxq7/jd4ygLDymnKLiy
AcB9379v6on2HjurjzZs1e2iZsXn1et2cbNu2x1ey6nVmZuZOv75KRXYE1VY162i+h5727Xynt2u
++n7i9ctudw+LmqI7Lfg2fV/qSL3uXjci/t3b5df9lL92eNcfGzRHvs35z3XdmzudpHn3R1r5HmK
9NV9RbZ//vshIvJz+TVdunKn2F47u2wg6LCPV16BvQ5nl9qa6c7C08qVb2fwX17XpYzSJp25nqEz
1yx7+8XVNF1PLfZer/NrXE/3Zbdzt49Pr1BWSbN3W28ftl12RVgXbufo4u1cZZaFdPZGpq4mF3pf
LVjcR64dd7Hdxj2OipYhZeQUr2wA2LZtZ2BwVvo87op+/dFn+h9iavXfxAT1f15u0n93rEr/1Z5y
/e2+fB2MifXusDw8oJziCt1KzlZGSYMCZQ0qqO9ThU0d5eFBlYUGvPfLmvutAbtsyA5oWEU1jUrN
rVJJyH1s29p2ZU0DKq1vUWJShm6mZCkpr06ldpuy0KC3jdtHaVOft49yu8ztb3G/3lu7LHJd5H7K
Q0u2t+N023j3b5U196nQnqgSu0+3L+94Q3ZZbYfdpkeBkjrvcTzb3vbjHsvi/t1+XWXNXx7b4uNz
9+Xdrz3O0vrQ08fp3g8rMdkeW3Km0kpCNpkt3q87tqfPjV3m7XfpY7br3HNWUt9pn5S93rZldoxZ
+SW2r4Cygx1Pb+eeg6ePx25b0mDb1/V8Zd+R58A9T+7fJnL/7rlYfDxERH6uxLqeUmavnV3eQup9
5dZyJ24l9hq7mHu9LWrofXa9q6C2ywaAkBIDdhafVaW8yja7vNOruLFfsWfilZmZp+rqOlVUVCsY
rNHnX1xRQqDa2//itu527vYJth83ALiv8uZWtds++nTyUoouXryhzOxCbdpxRCUlQR09FqcryUXe
SaLbLqey3Tvxc4+jpnNCWXklKx0AdgSG56TT567px69t1l9/VqV/fb1Zr9WP6T+/EdJ/ciCo/3ZT
qvbtPaBiu7OqcKduJaYrp6Zb5c12hlrTbguVnXVWNStQ3mQftyrbFlO30JbV24Moq7MD7FRJTa1u
2+RT1jKofDc02BMXbB1RaW29bicXqDTUozu2WGZXddvtWpVZWK2ixgFVtQ4pv7zW9h2y++9SSWOv
Laz25Np9Fte2Kqe03lvYc0pqbJ89qmwdVEGwUXn2pJQ1ddtt65VdHrZjDOnGjQSll7fbfYa9/bkF
Oj4+Qam2OJfYIOAW0sLKBmUWN3hfRimta7PBoNZ7gt3C6RbUktoWBUobvE+asnp74ktr7clvs/u1
BbsmrIzcAt1OKVJ524TKauu8x1xYWWsDjl3mPZbIYy9rtAnP3nfHUdFiz0Pd4mO2Bduuy7PHkJiU
bFNhqT1no6qob1J8YraK3CejPW43GARtgCmy43bPfU5Fk9KzsnUtMd8W+iEV2WW5dlxl9m9UEGyy
+2m2f5sW+7epjwwYNrRU2PBAROTn3AnZjdRybx0rqHVfQbW1xda6tMIGxV3P0rn4bK+z1zJtoa+y
194eb5vIdr322hrWndxaJWRXq8ANDrYOuevKmoZ0/OxN9fX26uLVOzp17qZqahuVHSj0zvZL7LU+
sh97jbY1xt3e7SdgZ/nuPtw64d66n0+IPXVNTU1hDQzYGlRaqaO2X/dzeW6IcNvlW+743eOo756y
AaB05QPA6IJ09sJ1/R+/W6//9GxI/3NwSB+O3tX/HZ7Qv7gU0n+5JUW7duyxxaRX1Z2jKrIpJiEl
oHxbiNPtwWQWliv+VrqSM7MVn5KnlPRspRTVKiM7oNvpBbqTkWdTTbVSc4LKKizWlavxNqnke4tk
RUOTEtNLVNk9o/ziEqXmB5Vs26fkFCo5N2gDhD0pGfn2YFvtQdl9lduEVVymtIKgbt9JU3JWnm4k
Zio1kK+EjFLlB6t1/fotXb+TrbTcQt26E9CdtGylFlbo5q07yqy0YaSySpev3VRSbplu3U62oaBB
aVmFNsnZfaXnKTUrX+m28KekZ9mx5elWUkCFduZf0zGuspo6Xb1+XXfyqmzBDSghLdcGmBwbEprs
uPOVkpWjm2nFquycUrCp2RswriflKN8mx/xi99hvKj49X6nZeTYo5CkpI8f+geuVkpFrj7lIyXlB
ZdrjvOWuS01VvA0AbkCo7hjyHndiRqFybSBy3wsqrQvZfvJ1MyldmWXNygwEdCO50Bb8Wht2buuq
PS9pecW6mZBlx5Zpx1Wg5NQMJRc22r/jmA0tQ0REvi5oxacHVWpn24W2oLuTq2I7+Tz8+RXl5xWp
uKQikr3+Hjl+UdkV7sy839vOLeI5Fa1Kzq/3vn9faItyUb2dmNl15eERHTsTr/Kycu09dEo79p1U
amqWbiek6pad7ZfamuK2c9u72yXm1Hr7cQNFiXcsPSq2dcMt8PtizysjI2DDRI+uXU9Q7Nlb3kmo
u94bSKxSOzmOT6tQY9+MsvNXOABstQFg/L4Ud/GG/pd/el8/OteiHxX262/HFvQ/tkzqR1db9V/Y
ALDl0+2qbBlQTfuIqmwhLLcz+ltuoc8qVkZBmVJscqlobFKSTTEVNqkkZ5coLVBgQ4Kd8duin5pf
pvTcUiWlZSohq0z51a2qah9XsLHRFt0SVXWN2AJWpOzioC345arpHLaz6Xwl2QKcWdml0NCccvPz
bbG0AaCgSCn55baoFdtZdY8tavmqaOtTemaBHU+u4pPzVODO3vMLlV7aqlJb8FPzyu147Gzazpoz
baG9447dhgh3WWlLvw0rtijbMJNaFFJ1qM2O1+4j0/7x7Uw5MzNHObUDaugaVFZusZLs46ScUqVl
F6rQzshzbNBIySm2oaRJlfYc3E4tVJUNNJX22JLSi5VjE1sgGFJGZqY9ZyX2j9Vmj9WGokr7By63
gSe7wBb2UluUR5SRV2DHYc+DDSpF5RXKKGlVXfeEqlptAOmaUFFpsT1/pcopLLOBp8D7hC2pqlea
PR/ZReXKssdbVF6qawkB5dW2KafIhqqCRpXXuqGhQeX19bqTGVR196Sq7d+SiMjPVVk3M2wAaOpV
oVtQrZLmAe2PjVOGrVe5OfnKycmzYSBf+2O+UKCy3fuWgLede/2vaLG1pMFOKGtVZIt1cUO/1WfD
xaiOfHFDVy5fV5qdeN1JTFaWnSQfOHTS2959S9Zt57Z3t3O3d5e7gcJ9a9d9y6GqfUxx1zN18OAx
3YhP1KbtMbpzJ0Xbdx5UQqDS7mPYG1zcwFDe3O8NMs0DczYAlK18AJh8KJ0+f03/009+r38ZE9R/
ltCif1U6oH+V3aV/eapa//r9S/rwg/WqbhtWQ/eIcots8bGFOSfYrLySGuVW2NRSGlKw2c7SS5oV
tAU0p6zeW+RuJmXawlOtssY2ZZc0qqTWhgS3qJc12SI/pdrWTiUlZ9qilG+LZJstdiPewp2Qmquc
6i5VhdvtTDhLGaXNqmgIe2fM7qsP7r4DhbUK2sKflV9lb/vt42qVNrQqNSPPFs565ZdXK6+qU2W1
jd4/UsAGh/TiOmXZVOfO9HMqW5VTYAu3ne3nFFXbk9hhg0CunfXbwt/co9ziSpXaAJBbZNNf07Aa
e0aVk19st81Vlj2+3BK7jf1D5ZdU2T9gZFFPSA/YsFGr2t5Zb5DILKizxzlkx1ih/KoG76sb2cEm
ZdtCfzMxXcmBMlXYBJprQ1JCSm7khzmCNcqr6VGwrsEW+SIbbiZU39HvHbd73gsaBlVpC3p8SoFq
u8bs+Ep0x4aCoppmG04KVWIDRroNNGmFNd63T3Iq2mw4CylQ1uK9zSpuUm2PPfedY0REvq7Gup1Z
5X07wH3rutT9nFh4yE6c6nXqcqpOX0nX6avpOnnJnbkHvW+xum287ez9/Kp2pRU1KTmv3l577Uzc
zuwXr8sqC3u3PXPV/SBgpre/aynF3rdhF7dzb93tUuz2aYVN3v6CLcPe7d23yd0P+l24FdClxDxv
jYy7kaVrSfY6b8NDZLtBr0o75lsZlQoP3bW17jkGgPEHT3QjJUc/+fuf6R/+sE4/f3uTfvPRdv3q
/S366Wsf6z/84ys6dfqs7XhO9T2TqrNFp6ZjTA29U2qwj+vtbLK+xxYpO1ONvJ20KWRcmXY2nlPT
q8Yl27nb1HWO2u1HI9u723r7G322vwbbR6372BYpd9mz6+3juq5R7/ccvf15+3T3+eVbb/tu296m
ujp3f0+PZ3Gbuq7xZ2+f3Zd9Ani3tf3Xd4/bx3ad28+S/Xpvn+5vcful1z+77dP9RrZ310Vu5973
trHjr+8dV64NAJllbWp0f7zBe9xLHvPT27u37rn2jtmud89brXvsXcM2JBUrt7ZHTXbb2g57rO5y
e99t7x2nHUvkOXj6XD07Fvfx02MjIvJ57jXSLZx17fbabK+jdfb672rqnVGLLaYtg0+z95v7Z59d
72q01+siW6Ddwu0GgKCdhbvX36XXL99HyM7Q6zu/vB+3vbudu32q7afITgLd7SLX2zpr17vbhQfn
IvsbnLf3520dWLIP974d/830oFpH7tkAUL7CAWDrjkD/1GO1DS8ov6xWl68n6lp8kq5cv6OrN+zt
jTtKTMtR18icPfgZ7wAae6cjee8vafHjnmk19U2p0s6iazom7Ilcsu2z2z99/9nHT7dZ3O4rHy/Z
fum2zy5b/vbpNosfL+Y+ftaSfSy29LaL1y19+2z7p/tefv3ibZdvv2ybJlv0q0M9qmob895/dv3i
/S5t6WXebWdU19qrwqpWGyRmvQHgK/e5uL132ZLLvcuWvSUi8nluXXNfJU3IqlZyTt1zl+B99WDI
+4FA95WEaNt8W+527vZB24/bX1JOrVW34tw+3O1yytvUNflIOYXPMQAMzcqmhgeydVs2pGhgfkn2
cd+c1Db6QG0j99U+urLc9h3jj9UxZreLcr2fc89Hx/ijF3puvO3HHtk/8pMvPyYiohfM1qqxhwrZ
4heyRS9ki95Ka7btW4bv2ev5Q28f4aEF77Jo235dbnt3O3d7tx+3v+fdhzvu8OCC93jcurviAWDH
zj2BrqEZXb6RoNPnr+jshas/yM5EKdp2q1G0+6a16gqRv7LXafoLZ89rtNf2leS9Dj3bT/Rtvq1v
20fkte6b++LcZV2+fkvDUwvKK65c2QCwc9dngeaOAe3Yvk1ZmRnKzsr03r5I7rbfp/LzcpWbE1jV
8nJzvKJdt1YtHsPz5G7nnqNAdtZLlxPIpu+g5Z8Ha1m0zylam9zr2ndVQX4efQcVFuR/a+7fp7Ki
TPcfPVFO4Qr/FLAbABpa+3T8+HE9evRIDx480P37918od9vvKnfsS3v8+LHKy8tVUFCgkpKSVSsQ
CKijo0Pz8/OanJzU1NTU9z53nHfv3pXjnqeX7cmTJ99ZAICIJ08ea/7BEwUKK1Y+ADS29evo0aOa
mZnR9PT0ny8atmBMz8zqvlts79+zxW5Oc3OzmrO3M9Nfbuduu5KmrLsL9/Xw4UPN236mpqJsY5fN
2SLlrl9+XbTcsS82OzvrLXKpqane+25xnptzxxzp/v0Hurdw196ft8d0X3e9x/P8LSwsqKurS5mZ
mWpoaPDe7+7ujl5Pj/r6+tXf329ve6Nv8zX19n65/dL3X7TOzk5VVlZ6g5N7HO45epmWPy9rmfu3
9WtuiPuucp/731X37t3zddFOvtaq5Sdea51bM/zY8hPcaLmTsbt37bXhLz0ATNvlE6P9Ks3LUXog
X6HmsFpaO9Tb3aOh0Ylnt1m6IH9dbvG/Z59InU1BZWRkqnvEPr47513uXW8L/11boB/cn1N7U6Pa
e4bthf7bh4BoA0B2dvazJ+bZ2apNSRPjQ5peeGgfP9T48Kjd3yM9WbJNtBYtv2xkZMQbANzC/s0e
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
ROTDGACIiIh8GAMAERGRD2MAICIi8mEMAERERD6MAYCIiMiHMQAQERH5MAYAIiIiH8YAQERE5MMY
AIiIiHwYAwAREZEPYwAgIiLyYQwAREREPowBgIiIyIcxABAREfkwBgAiIiIfxgBARETkwxgAiIiI
fBgDABERkQ9jACAiIvJhDABEREQ+jAGAiIjIhzEAEBER+TAGACIiIh/GAEBEROTDGACIiIh8GAMA
ERGRD2MAICIi8mEMAERERD6MAYCIiMiHMQAQERH5MAYAIiIiH8YAQERE5MMYAIiIiHwYAwAREZEP
YwAgIiLyYQwAREREPowBgIiIyIcxABAREfkwBgAiIiIfxgBARETkwxgAiIiIfBgDABERkQ9jACAi
IvJhDABEREQ+jAGAiIjIhzEAEBER+TAGACIiIh/GAEBEROTDXmoAiImJ0ezs7LMhgIiIiH4YubV7
8kUHgEsXL9gUMamJiXFviiAiIqIfSLZ2j48O697D5xgAtu/YnTNrN5i//1gL9tZND0RERPTD64mk
ovK6lQ0A77z7bkmwpkm5xVUKFFR4kwMRERH98HKL/5WrN1c2AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgEU/+tH/D7Kl/8v+6s+kAAAAAElF
TkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$Main1_Load={
	#TODO: Initialize Form Controls here
	$label1.Text = "Message Center"
	
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion








$aboutThisApplicationToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-About_psf
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	[Environment]::Exit(0)
	
	
}

$newHealthCheckToolStripMenuItem_Click={
	#TODO: Place custom script here
	# Load Data
	#get target directory
	
	$openfiledialog1.Multiselect = $false
	$openfiledialog1.DefaultExt = ".zip"
	$openfiledialog1.Title = "Open Customer Zip File"
	
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		write-message "Loading New Data"
		$zipfile = $openfiledialog1.filename
		#unzip file to target directory 
		write-message "Expanding Zip"
		$dir = Split-Path -Path $zipfile
		Expand-Archive -Path $zipfile -DestinationPath $dir
		write-message "Zip Expansion Complete"
		$curwkdir.Text = $dir
	}
	
}

$supportToolStripMenuItem_Click={
	#TODO: Place custom script here
	#open Outlook and create email support request
	#$ol = New-Object -comObject Outlook.Application
	
	if (([System.Diagnostics.Process]::GetProcessesByName("OUTLOOK")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Outlook.Application")
	}
	else
	{
		$ol = New-Object -comObject Outlook.Application
	}
	
	#Create the new email
	$mail = $ol.CreateItem(0)
	
	#Optional, set the subject
	$mail.Subject = "Support request for Quest Documentation and Report application."
	
	$body = Show-Inputbox -message "Please enter the support request in detail" -title "Support Request Detail"
	#Optional, set the body
	$mail.Body = $body
	
	#set the to address
	$null = $mail.recipients.add("gary_cook@questsys.com")
	
	#Get the new email object
	$inspector = $mail.GetInspector
	
	#Bring the message window to the front
	$inspector.Display()
}

$applicationVerificationToolStripMenuItem_Click={
	#TODO: Place custom script here
	if (([System.Diagnostics.Process]::GetProcessesByName("Visio")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Visio.Application")
		$noexitvisio = $true
	}
	else
	{
		$ol = New-Object -comObject Visio.Application
		$ol.visible = $false
		$noexitvisio = $false
	}
	if (($ol | measure).count -gt 0)
	{
		$visioloaded = $true
		[System.Windows.MessageBox]::Show('Visio is Available', 'Visio Status', 'Ok', 'Information')
	}
	else
	{
		$visioloaded = $false
		[System.Windows.MessageBox]::Show('Visio is NOT Available', 'Visio Status', 'Ok', 'Error')
	}
	if ($noexitvisio -eq $false)
	{
		$ol.quit()
	}
}

$preferencesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-Prefs_psf
}

$validateModulesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-ValMod_psf
}

$buttonADDocumentionReport_Click={
	#TODO: Place custom script here
	#start Ad Word Documentation fist run is load all data then break out for the old script
	#need to revise this for new documentation
	
	#load data and build word document
	$template = "$($curwkdir.text)\ADTemplate.docx"
	$wordfile = "$($curwkdir.text)\AD Document Deliverable.docx"
	$wordDoc = get-WordDocument -filepath $template
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD ASSESSMENT OVERVIEW" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was Tasked with performing and Active Directory assessment for your company.  This deliverable was produced with the results of our script-based investigation of your AD Environment.  Quest used a custom script developed in house to capture your current configuration, health, and performance information." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ASSESSMENT STRUCTURE" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "This deliverable is broken into 3 main sections." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$ListOfItems = @('Overview of the current configuration of Active Directory', 'Forest', 'Domains', 'Sites', 'Features', 'AD object reports covering Users, Groups, Computers, and GPOs.')
	$OverrideLevels = @(0, 1, 1, 1, 1, 0)
	$paragraph = Add-WordList -WordDocument $wordDoc -ListType Numbered -ListData $ListOfItems -ListLevels $OverrideLevels -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ACTIVE DIRECTORY CONFIGURATION" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "FOREST" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "CONFIGURATION" -HeadingType Heading3 -Supress $true
	$forest = Import-Clixml -Path "$($curwkdir.text)\forest.xml"
	$forest.forestmode = $forest.forestmode.value
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the forest $($forest.name) and pull the configuration contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $forest -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SCHEMA" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Schema for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	$schout = Import-Clixml -Path "$($curwkdir.text)\schema.xml"
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $schout -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	$optfull = Import-Clixml -Path "$($curwkdir.text)\optionalfeatures.xml"
	$optout = $optfull | select Name, Created, featureGUID, featurescope, enabledscopes, modified, protectedfromaccidentaldeletion, required*
	
	$otpfeatures = $optfull | select name, created, modified
	$optfword = @()
	foreach ($opt in $optfull)
	{
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name Feature -Value $opt.name
		$obj | Add-Member -MemberType NoteProperty -Name Created -Value $opt.created
		$obj | Add-Member -MemberType NoteProperty -Name Modified -Value $opt.Modified
		$optfword += $obj
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "OPTIONAL FEATURES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Optional Features for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $optfword -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	foreach ($opt in $optout)
	{
		$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the Optional Feature $($opt.name)." -Supress $true
		#correct required forest mode
		$opt.requiredforestmode = $opt.requiredforestmode.value
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $opt -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$trusts = Import-Clixml -Path "$($curwkdir.text)\trusts.xml"
	if (($trusts | measure).count -eq 0)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) The forest contained no Trusts." -Supress $true
	}
	else
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $trusts -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	}
	$adsites = Import-Clixml -Path "$($curwkdir.text)\sites.xml"
	$SoutWord = $ADSites | select name, domains
	
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($Site in $ADSites)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site $($Site.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $site -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$sitelink = Import-Clixml -Path "$($curwkdir.text)\sitelink.xml"
	if (($sitelink | measure).count -eq 1)
	{
		$SLoutWord = $sitelink | select name, cost, ReplicationFrequencyInMinutes, sitesincluded
	}
	else
	{
		$SLoutWord = $sitelink | select name, cost, ReplicationFrequencyInMinutes, @{ Name = "SitesIncluded"; expression = { [string]::Join(";", ($_.sitesincluded)) } }
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINKS" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SloutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($link in $sitelink)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link $($link.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $link -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$sitelinkbridge = Import-Clixml -Path "$($curwkdir.text)\sitelinkbridge.xml"
	if (($sitelinkbridge | measure).count -ne 0)
	{
		$SLBoutWord = $sitelinkbridge | select name, sitelinksincluded
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SLBoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		ForEach ($bridge in $sitelinkbridge)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link bridge $($bridge.name) contains the following details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $bridge -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
	}
	else
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name).  There are no site link bridges in the forest." -Supress $true
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAINS" -HeadingType Heading2 -Supress $true
	$domains = Import-Clixml -Path "$($curwkdir.text)\domains.xml"
	$adm = $domains | select netbiosname, dnsroot, domainmode
	$adm | Add-Member -MemberType NoteProperty -Name ForestRoot -Value $false
	if ($adm.parentdomain -eq $null)
	{
		$adm.ForestRoot = $true
	}
	
	$adm.domainmode = $adm.domainmode.value
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest Discovered the following list of domains in the forest $($forest.name) and will detail each in a section section." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $adm -Design MediumShading1Accent5 -AutoFit Window -MaximumColumns 7
	foreach ($domain in $domains)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN: $($domain)" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to pull information from the domain $($domain) and compile it into the following table below." -Supress $true
		$domain.domainmode = $domain.domainmode.value
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $domain -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		$dcs = Import-Clixml -Path "$($curwkdir.text)\domaincontrollers.xml"
		$dcs = $dcs |?{ $_.domain -eq $domain.dnsroot }
		$tempdc = $dcs | select name, domain, enabled, isglobalcatalog, isreadonly, site
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following details the domain controllers in the domain $($domain).  Each Domain Controller is broken out into its own section." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempdc -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
		$dcdns = Import-Clixml -Path "$($curwkdir.text)\dns.xml"
		foreach ($dc in $dcs)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN CONTROLLER: $($dc.name)" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dc -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			
			$dns = $dcdns | ?{$_.computername -eq $dc.hostname}
			if (($dns | measure).count -ne 0)
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dns -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			else
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "This Domain Controller is not a DNS Server." -Supress $true
			}
			
			
			
			
		}
		$DNSZones = Import-Clixml -Path "$($curwkdir.text)\dnszone.xml"
		$DNSZones = $DNSZones | ?{ $_.domain -eq $domain.dnsroot }
		$DNSZOut = $DNSZones | select ZoneName, ZoneType, replicationscope, IsDSIntegrated, IsReverseLookupZone, IsAutoCreated
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN DNS ZONES" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following DNS Zones for the domain $($domain).  Details are included in the table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $DNSZout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
		
		$ADPassPol = Import-Clixml -Path "$($curwkdir.text)\DomainPasswordPolicy.xml"
		$ADPassPol = $ADPassPol | ?{ $_.domain -eq $domain.dnsroot }
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN PASSWORD POLICY" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following default password policy for the domain $($domain)and below is a table of the details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ADPassPol -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
		$ADFGPassPol = Import-Clixml -Path "$($curwkdir.text)\FineGrainedPasswordPolicy.xml"
		$ADFGPassPol = $ADFGPassPol | ?{ $_.domain -eq $domain.dnsroot }
		if (($ADFGPassPol | measure).count -ne 0)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following Fine Grained password policy for the domain $($domain) and below is a Summary table With detail tables of each policy to follow." -Supress $true
			$tempfgp = $ADFGPassPol | select Name, Description, Precedence, Appliesto
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempfgp -Design MediumShading1Accent5 -Supress $true -AutoFit Window
			foreach ($FGP in $ADFGPassPol)
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FGP Policy $($FGP.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The deatils of the FGP Policy $($FGP.name) are contained in the table below." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $FGP -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			
		}
		else
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the domain $($domain) contains no fine grained password policies." -Supress $true
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD OBJECTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the information on AD object in the domain $($domain).  The objects contained in the section include OUs,Users, Groups, Group Policy Objects, and Printers." -Supress $true
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUP POLICY OBJECTS (GPO)" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the GPOs in the domain $($domain)." -Supress $true
		
		$GPO = Import-Clixml -Path "$($curwkdir.text)\GPOs.xml"
		$GPO = $GPO | ?{ $_.domainname -eq $domain.dnsroot }
		$gpoout = $GPO | select displayname, gpostatus, creationtime
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gpoout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($gp in $GPO)
		{
			
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "GPO - $($gp.displayname)" -HeadingType Heading5 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the GPO $($gp.displayname)." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gp -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "ORGANIZATIONAL UNITS (OU)" -HeadingType Heading4 -Supress $true
		$ous = Import-Clixml -Path "$($curwkdir.text)\OUs.xml"
		$ous = $ous | ?{ $_.domain -eq $domain.dnsroot }
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Summary of OUs in the domain $($domain)." -Supress $true
		$ouout = $ous | select Name, Created, Protectedfromaccidentaldeletion, linkedgrouppolicyobjects, usercount, computercount, groupcount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ouout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
		
		#load users becasue groups rely on it
		$users = Import-Clixml -Path "$($curwkdir.text)\Users.xml"
		$users = $users | ?{ $_.domain -eq $domain.dnsroot }
				
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUPS" -HeadingType Heading4 -Supress $true
		$privGroups = @("Account Operators", "Backup Operators", "Print Operators", "Server Operators", "Cert Publishers", "Enterprise Admins", "Domain Admins", "Administrators", "Schema Admins")
		
		$groups = Import-Clixml -Path "$($curwkdir.text)\groups.xml"
		$groups = $groups | ?{ $_.domain -eq $domain.dnsroot }
		$totalGP = ($groups | measure).count
		$BI = 0
		$US = 0
		$UD = 0
		$GS = 0
		$GD = 0
		$LS = 0
		$LD = 0
		foreach ($grp in $groups)
		{
			if ($grp.isCriticalSystemObject -eq $true)
			{
				$BI += 1
			}
			else
			{
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'Global')
				{
					$GS += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'Global')
				{
					$GD += 1
				}
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'DomainLocal')
				{
					$LS += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'DomainLocal')
				{
					$LD += 1
				}
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'Universal')
				{
					$US += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'Universal')
				{
					$UD += 1
				}
			}
			
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Group Statistics in the domain $($domain)." -Supress $true
		$gout = @{ }
		$gout.Add("Total Groups", $totalgp)
		$gout.Add("Built-In", $BI)
		$gout.Add("Universal Security", $US)
		$gout.Add("Universal Distribution", $UD)
		$gout.Add("Global Security", $GS)
		$gout.Add("Global Distribution", $GD)
		$gout.Add("Domain Local Security", $LS)
		$gout.Add("Domain Local Distribution", $LD)
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 8
		$privgrps = @()
		foreach ($grp in $groups)
		{
			foreach ($pgrp in $privGroups)
			{
				if ($grp.name -eq $pgrp)
				{
					$grp | Add-Member -MemberType NoteProperty -Name MemberCount -Value (count-groupusers -group $grp.distinguishedname) -Force
					$privgrps += $grp
					
				}
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Privileged Group Statistics in the domain $($domain)." -Supress $true
		$pgout = $privgrps | select Name, MemberCount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $pgout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($pgroup in $privgrps)
		{
			if ($pgroup.MemberCount -ne 0)
			{
				$members = @()
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "$($pgroup.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following users are members of this privileged group." -Supress $true
				foreach ($member in $pgroup.members)
				{
					try
					{
						$user = $users | ?{ $_.distinguishedname -eq $member }
						
						
						if (($user | measure).count -ne 0)
						{
							if ($user.passwordlastset -eq $null)
							{
								$LS = $user.created
							}
							else
							{
								$LS = $user.passwordlastset
							}
							$ed = [datetime]::Now
							$PWAge = NEW-TIMESPAN -Start $LS -End $ed
							$obj = New-Object System.Management.Automation.PSObject
							$obj | Add-Member -MemberType NoteProperty -Name LogonID -Value $user.samaccountname
							$obj | Add-Member -MemberType NoteProperty -Name Name -Value $user.DisplayName
							$obj | Add-Member -MemberType NoteProperty -Name PWDAgeinDays -Value $PWAge.days
							$obj | Add-Member -MemberType NoteProperty -Name LastLoggedIn -Value $user.lastlogondate
							$obj | Add-Member -MemberType NoteProperty -Name PWDNoExpire -Value $user.passwordneverexpires
							$obj | Add-Member -MemberType NoteProperty -Name PWDReversable -Value $user.AllowReversiblePasswordEncryption
							$obj | Add-Member -MemberType NoteProperty -Name PWDNotRequired -Value $user.passwordnotrequired
							
							$members += $obj
						}
					}
					catch
					{ }
					
				}
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $members -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "USERS" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "User Statistics in the domain $($domain)." -Supress $true
		
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name TotalUsers -Value ($users | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name EnabledUsers -Value (($users | ?{ $_.enabled -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name DisabledUsers -Value (($users | ?{ $_.enabled -eq $false }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name LockedUsers -Value (($users | ?{ $_.lockedout -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiredUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -lt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiringUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -gt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDNeverExpiresUsers -Value (($users | ?{ $_.passwordneverexpires -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name CannotChangePWDUsers -Value (($users | ?{ $_.cannotchangepassword -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDExpiredUsers -Value (($users | ?{ $_.passwordexpired -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name NoPreAuthUsers -Value (($users | ?{ $_.doesnotrequirepreauth -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ReversableEncryptionUsers -Value (($users | ?{ $_.AllowReversiblePasswordEncryption -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name StaleUsers -Value (($users | ?{ $_.lastlogondatecalculated -lt [datetime]::Now.AddDays(-90) }) | measure).count
		
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $obj -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
	}
	Save-WordDocument -WordDocument $wordDoc -FilePath $wordfile
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>