<File version="3.1">
  <FileID>6802a47c-7f3f-4962-8e99-2399adb64a9f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADtzSURBVHhe7d1ZbFxpnqb3Agz0NIwBfGFgLnzj
m/HAsOGLsQ34xhjYaM90u41xV9X0uGvp2rIqMyv3klL7LlGidpEiRYqSKEqUSIk7Je5rcN/3fd/3
nRJJUfvr7zsUM5msyEylMklJdZ5f4gGpiBOHwSAzvv8JBoM/AgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA38vZv/7rv/L85Cc/8fj6nvD4+Ph6jhAR
EdFbk8/R456DBw95/vt/8288Zl23fbt/8Vd/Vbl12w7lV7aoeWBWLabm/hkiIqK//PpmzLo3o7ah
+VeqdXDui321Dc392fkv15f7sPvzvs031z58z1x+WvFJmfqf/+2/1Ysl/pv9+B9+7MmraFZV16SK
GgeUW92lHFN2VadyTPbf+fV9KjB5arpM3URERH8R5dV2K6eyQ/HZNYrLqv5OxWZW625evfLNPuz6
mJhb63W7b8tezl7e7sfuz+7X23bflL3+uVVdauyfVXBI6MsNAMePn/K0j9xXXnW7Pt+xR5988pn2
7t2vI0d8dPDAIe3cuVu//s3vlJThUXXXhPLrelRgq+9dae37q/92WnPaV07fzH7Aj/2Vz+PF+07r
tnuVfsh9ERHRS1fY0KfolDIl5dQoNa9OKd+h1IJ6xaWVK8ks2glmAb6TVanU/Povzk8raFBWaetX
yixu/uo+zPb2cvbydj92f3a/X5z/Yh+ZxS0r+ytpUaZp7cdJza9zrr/9PCo6xpVXUv1yA4D9uf/w
/HOduXhdu/f76E5Jm+ILmnSntE13zAeMyWvQtYRshVwOVZG5oYob+1VkKmkeUknTgHNaSdOgc3pJ
8+AXpxU3DjjvO2/N6fb8H76V67Py8Vfe/+pp67d/xdZ+PmvfN315mpfLecm5bcx1K2l68f4Xt9O3
bb96u3rfjoiIvnuF9f2KSi517pPtwV2hORh72YrMepNbbtZMexSeUalCcwT/5Xn9yipv1bXYLF2L
MZm3V6MzFJte6tyXF9bbXuzLXM5ePj6zSjllbc5lnX2Y7XKrOhRxJ0+Rd/KVXdGu63HZik4tdh4t
WN1HvrnepeYy9vOo6hxXVl7pyw0AR48e94wtSJfDo/TO7tP6XwIa9D8EVOvvbrfqf7pYq//uVKX+
9myh/AOCzAfsUkXbqCrbR5SZV6SM0nZVd48q01OghJQsJWaVmCs+rMqOMZU2tOpOcqYS0nKUZiae
ivZR05hz5SrahlXeOmK2Gzf7MqebfVa0jXz51my3ep7z1py2fnv7fpWpom1IxeYGKLeXtft3Tht2
FuWK1gHlljWquGXEOb3KXK/y1uEvtrP7sv/+4jTnutmP/+Ljvji/snNSZfUtyjBTWUXH5JefW2qu
siq7zbYrl1173expX92ved+cV9U5obJG88VqXvl3RcuAsvKLze2UJ09dv7le9mN+eR3sZcuaes03
59CX+3Y+jr097O009sXnU/HicyEioperzBSbVqESs4DahdR5hNdkD87KzH3xavZ+2R74rp5vK2ro
NwNAu5I85ig+p1YFNd3m9D6nUrPuBF2LV3Z2gerqGlVVVafq6npdvhqlu546Z/+r29rL2cvfNfux
A4B9RDi/tsfsY1hXbqUpMjJO2bnFOuh7QWVl1Qq+GK6o1BLn4NBul1fT46x59vOo75tVTkHZyw4A
vp6JRSnsRox+/NEh/fXpWv3r2DZ91DSt/zquXf+FX7X+x4PpOnvGT6VmQqrumlRVc7eSUtJ0J7tK
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
p09r1PmTwoNfbGP/5O/Y+JTmzfUd6mzQrfBrCo+5o/beYU1MTmludmbliX9jIyvP3h+1f6a33/nz
wfZv1dvPyT5JcMScNz0zp3uzU6qvrlBVW7/um/ftnwaeMqfPTk04f4/e/k38gSGzrTlvePXPGP8A
MQAQEdH3bcMGAPv76vav1v3gA8APUr/zt/tn7CAxO+0szv1et/vm7GsMjIyOaXzEDgfet9mIVgcA
XgeAiIhetQ0ZAOxp9kja/m16XglwYyorK3P+Lj0DABERvUobMgCs7tg+7D47O0sb1PrbnIiI6GXb
sAFgdee0cXm7zYmIiF4mu45s2ABAREREb2YMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE
5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgA
iIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhc
GAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAR
EZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtj
ACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIi
cmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwA
RERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQu
jAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCI
iMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUx
ABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBER
uTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYA
IiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIX
xgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBE
ROTCGACIiIhcGAMAERGRC2MAICIicmHfawAICAjQwsLCF0MAERERvR3ZtXvuVQeAW5ERZoqY0+zs
jDNFEBER0VuSWbtnpib08Ml3GACO+Z7MWzAXWHr0TMvmrZ0eiIiI6O3ruaSSysaXGwC2fv55WXV9
q/JLa+UpqnImByIiInr7sot/VHTCyw0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABg1Y9+9P8D1KJoeXDY9o8AAAAASUVORK5CYII=</Preview>
  <Form>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
D2Q/AAA=</Form>
  <Code><![CDATA[
$Main1_Load={
	#TODO: Initialize Form Controls here
	$label1.Text = "Message Center"
	
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion








$aboutThisApplicationToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-About_psf
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	[Environment]::Exit(0)
	
	
}

$newHealthCheckToolStripMenuItem_Click={
	#TODO: Place custom script here
	# Load Data
	#get target directory
	
	$openfiledialog1.Multiselect = $false
	$openfiledialog1.DefaultExt = ".zip"
	$openfiledialog1.Title = "Open Customer Zip File"
	
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		write-message "Loading New Data"
		$zipfile = $openfiledialog1.filename
		#unzip file to target directory 
		write-message "Expanding Zip"
		$dir = Split-Path -Path $zipfile
		Expand-Archive -Path $zipfile -DestinationPath $dir
		write-message "Zip Expansion Complete"
		$curwkdir.Text = $dir
	}
	
}

$supportToolStripMenuItem_Click={
	#TODO: Place custom script here
	#open Outlook and create email support request
	#$ol = New-Object -comObject Outlook.Application
	
	if (([System.Diagnostics.Process]::GetProcessesByName("OUTLOOK")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Outlook.Application")
	}
	else
	{
		$ol = New-Object -comObject Outlook.Application
	}
	
	#Create the new email
	$mail = $ol.CreateItem(0)
	
	#Optional, set the subject
	$mail.Subject = "Support request for Quest Documentation and Report application."
	
	$body = Show-Inputbox -message "Please enter the support request in detail" -title "Support Request Detail"
	#Optional, set the body
	$mail.Body = $body
	
	#set the to address
	$null = $mail.recipients.add("gary_cook@questsys.com")
	
	#Get the new email object
	$inspector = $mail.GetInspector
	
	#Bring the message window to the front
	$inspector.Display()
}

$applicationVerificationToolStripMenuItem_Click={
	#TODO: Place custom script here
	if (([System.Diagnostics.Process]::GetProcessesByName("Visio")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Visio.Application")
		
	}
	else
	{
		$ol = New-Object -comObject Visio.Application
		$ol.visible = $false
	}
	if (($ol | measure).count -gt 0)
	{
		$visioloaded = $true
		[System.Windows.MessageBox]::Show('Visio is Available', 'Visio Status', 'Ok', 'Information')
	}
	else
	{
		$visioloaded = $false
		[System.Windows.MessageBox]::Show('Visio is NOT Available', 'Visio Status', 'Ok', 'Error')
	}
	$ol.quit()
}

$preferencesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-Prefs_psf
}

$validateModulesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-ValMod_psf
}

$buttonADDocumentionReport_Click={
	#TODO: Place custom script here
	#start Ad Word Documentation fist run is load all data then break out for the old script
	#need to revise this for new documentation
	
	#load data and build word document
	$template = "$($curwkdir.text)\ADTemplate.docx"
	$wordfile = "$($curwkdir.text)\AD Document Deliverable.docx"
	$wordDoc = get-WordDocument -filepath $template
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD ASSESSMENT OVERVIEW" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was Tasked with performing and Active Directory assessment for your company.  This deliverable was produced with the results of our script-based investigation of your AD Environment.  Quest used a custom script developed in house to capture your current configuration, health, and performance information." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ASSESSMENT STRUCTURE" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "This deliverable is broken into 3 main sections." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$ListOfItems = @('Overview of the current configuration of Active Directory', 'Forest', 'Domains', 'Sites', 'Features', 'AD object reports covering Users, Groups, Computers, and GPOs.')
	$OverrideLevels = @(0, 1, 1, 1, 1, 0)
	$paragraph = Add-WordList -WordDocument $wordDoc -ListType Numbered -ListData $ListOfItems -ListLevels $OverrideLevels -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ACTIVE DIRECTORY CONFIGURATION" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "FOREST" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "CONFIGURATION" -HeadingType Heading3 -Supress $true
	$forest = Import-Clixml -Path "$($curwkdir.text)\forest.xml"
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the forest $($forest.name) and pull the configuration contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $forest -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SCHEMA" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Schema for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	$schout = Import-Clixml -Path "$($curwkdir.text)\schema.xml"
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $schout -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	$optfull = Import-Clixml -Path "$($curwkdir.text)\optionalfeatures.xml"
	$optout = $optfull | select Name, Created, featureGUID, featurescope, enabledscopes, modified, protectedfromaccidentaldeletion, required*
	$otpfeatures = $optfull | select name, created, modified
	$optfword = @()
	foreach ($opt in $optfull)
	{
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name Feature -Value $opt.name
		$obj | Add-Member -MemberType NoteProperty -Name Created -Value $opt.created
		$obj | Add-Member -MemberType NoteProperty -Name Modified -Value $opt.Modified
		$optfword += $obj
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "OPTIONAL FEATURES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Optional Features for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $optfword -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	foreach ($opt in $optout)
	{
		$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the Optional Feature $($opt.name)." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $opt -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$trusts = Import-Clixml -Path "$($curwkdir.text)\trusts.xml"
	if (($trusts | measure).count -eq 0)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) The forest contained no Trusts." -Supress $true
	}
	else
	{
		Output-Json -object $trusts -filename "Trusts"
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $trusts -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	}
	$adsites = Import-Clixml -Path "$($curwkdir.text)\sites.xml"
	$SoutWord = $ADSites | select name, domains
	
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($Site in $ADSites)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site $($Site.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $site -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$sitelink = Import-Clixml -Path "$($curwkdir.text)\sitelink.xml"
	$SLoutWord = $sitelink | select name, cost, ReplicationFrequencyInMinutes, @{ Name = "SitesIncluded"; expression = { [string]::Join(";", ($_.sitesincluded)) } }
		
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINKS" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SloutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($link in $sitelink)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link $($link.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $link -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	$sitelinkbridge = Import-Clixml -Path "$($curwkdir.text)\sitelinkbridge.xml"
	if (($sitelinkbridge | measure).count -ne 0)
	{
		$SLBoutWord = $sitelinkbridge | select name, sitelinksincluded
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SLBoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		ForEach ($bridge in $sitelinkbridge)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link bridge $($bridge.name) contains the following details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $bridge -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
	}
	else
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name).  There are no site link bridges in the forest." -Supress $true
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAINS" -HeadingType Heading2 -Supress $true
	$domains = Import-Clixml -Path "$($curwkdir.text)\domains.xml"
	$adm = $domains | select netbiosname, dnsroot, domainmode, forestroot
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest Discovered the following list of domains in the forest $($forest.name) and will detail each in a section section." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $adm -Design MediumShading1Accent5 -AutoFit Window -MaximumColumns 7
	foreach ($domain in $domains)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN: $($domain)" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to pull information from the domain $($domain) and compile it into the following table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $domain -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		$dcs = Import-Clixml -Path "$($curwkdir.text)\domaincontrollers.xml"
		$dcs = $dcs |?{ $_.domain -eq $domain.dnsroot }
		$tempdc = $dcs | select name, domain, enabled, isglobalcatalog, isreadonly, site
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following details the domain controllers in the domain $($domain).  Each Domain Controller is broken out into its own section." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempdc -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
		$dcdns = Import-Clixml -Path "$($curwkdir.text)\dns.xml"
		foreach ($dc in $dcs)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN CONTROLLER: $($dc.name)" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dc -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			
			$dns = $dcdns | ?{$_.computername -eq $dc.hostname}
			if (($dns | measure).count -ne 0)
			{
				Output-Json -object $dns -filename "$($dc.name)-DNSSettings"
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dns -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			else
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "This Domain Controller is not a DNS Server." -Supress $true
			}
			
			$DNSZones = Import-Clixml -Path "$($curwkdir.text)\dnszone.xml"
			$DNSZones = $DNSZones |?{$_.domain -eq $domain.dnsroot}
			$DNSZOut = $DNSZones | select ZoneName, ZoneType, replicationscope, IsDSIntegrated, IsReverseLookupZone, IsAutoCreated
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN DNS ZONES" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following DNS Zones for the domain $($domain).  Details are included in the table below." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $DNSZout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
			
			
			
		}
		$ADPassPol = Import-Clixml -Path "$($curwkdir.text)\DomainPasswordPolicy.xml"
		$ADPassPol = $ADPassPol | ?{ $_.domain -eq $domain.dnsrooot }
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN PASSWORD POLICY" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following default password policy for the domain $($domain)and below is a table of the details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ADPassPol -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
		$ADFGPassPol = Import-Clixml -Path "$($curwkdir.text)\FineGrainedPasswordPolicy.xml"
		$ADFGPassPol = $ADFGPassPol | ?{ $_.domain -eq $domain.dnsroot }
		if (($ADFGPassPol | measure).count -ne 0)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following Fine Grained password policy for the domain $($domain) and below is a Summary table With detail tables of each policy to follow." -Supress $true
			$tempfgp = $ADFGPassPol | select Name, Description, Precedence, Appliesto
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempfgp -Design MediumShading1Accent5 -Supress $true -AutoFit Window
			foreach ($FGP in $ADFGPassPol)
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FGP Policy $($FGP.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The deatils of the FGP Policy $($FGP.name) are contained in the table below." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $FGP -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			
		}
		else
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the domain $($domain) contains no fine grained password policies." -Supress $true
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD OBJECTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the information on AD object in the domain $($domain).  The objects contained in the section include OUs,Users, Groups, Group Policy Objects, and Printers." -Supress $true
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUP POLICY OBJECTS (GPO)" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the GPOs in the domain $($domain)." -Supress $true
		
		$GPO = Import-Clixml -Path "$($curwkdir.text)\GPOs.xml"
		$GPO = $GPO | ?{ $_.domainname -eq $domain.dnsroot }
		$gpoout = $GPO | select displayname, gpostatus, creationtime
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gpoout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($gp in $GPO)
		{
			
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "GPO - $($gp.displayname)" -HeadingType Heading5 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the GPO $($gp.displayname)." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gp -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "ORGANIZATIONAL UNITS (OU)" -HeadingType Heading4 -Supress $true
		$ous = Import-Clixml -Path "$($curwkdir.text)\OUs.xml"
		$ous = $ous | ?{ $_.domain -eq $domain.dnsroot }
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Summary of OUs in the domain $($domain)." -Supress $true
		$ouout = $ous | select Name, Created, Protectedfromaccidentaldeletion, linkedgrouppolicyobjects, usercount, computercount, groupcount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ouout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
		
		#load users becasue groups rely on it
		$users = Import-Clixml -Path "$($curwkdir.text)\Users.xml"
		$users = $users | ?{ $_.domain -eq $domain.dnsroot }
				
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUPS" -HeadingType Heading4 -Supress $true
		$privGroups = @("Account Operators", "Backup Operators", "Print Operators", "Server Operators", "Cert Publishers", "Enterprise Admins", "Domain Admins", "Administrators", "Schema Admins")
		
		$groups = Import-Clixml -Path "$($curwkdir.text)\groups.xml"
		$groups = $groups | ?{ $_.domain -eq $domain.dnsroot }
		$totalGP = ($groups | measure).count
		$BI = 0
		$US = 0
		$UD = 0
		$GS = 0
		$GD = 0
		$LS = 0
		$LD = 0
		foreach ($grp in $groups)
		{
			if ($grp.isCriticalSystemObject -eq $true)
			{
				$BI += 1
			}
			else
			{
				if ($grp.groupcategory -eq 'Security' -and $grp.groupscope -eq 'Global')
				{
					$GS += 1
				}
				if ($grp.groupcategory -eq 'Distribution' -and $grp.groupscope -eq 'Global')
				{
					$GD += 1
				}
				if ($grp.groupcategory -eq 'Security' -and $grp.groupscope -eq 'DomainLocal')
				{
					$LS += 1
				}
				if ($grp.groupcategory -eq 'Distribution' -and $grp.groupscope -eq 'DomainLocal')
				{
					$LD += 1
				}
				if ($grp.groupcategory -eq 'Security' -and $grp.groupscope -eq 'Universal')
				{
					$US += 1
				}
				if ($grp.groupcategory -eq 'Distribution' -and $grp.groupscope -eq 'Universal')
				{
					$UD += 1
				}
			}
			
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Group Statistics in the domain $($domain)." -Supress $true
		$gout = @{ }
		$gout.Add("Total Groups", $totalgp)
		$gout.Add("Built-In", $BI)
		$gout.Add("Universal Security", $US)
		$gout.Add("Universal Distribution", $UD)
		$gout.Add("Global Security", $GS)
		$gout.Add("Global Distribution", $GD)
		$gout.Add("Domain Local Security", $LS)
		$gout.Add("Domain Local Distribution", $LD)
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 8
		$privgrps = @()
		foreach ($grp in $groups)
		{
			foreach ($pgrp in $privGroups)
			{
				if ($grp.name -eq $pgrp)
				{
					$grp | Add-Member -MemberType NoteProperty -Name MemberCount -Value (count-groupusers -group $grp.distinguishedname) -Force
					$privgrps += $grp
					
				}
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Privileged Group Statistics in the domain $($domain)." -Supress $true
		$pgout = $privgrps | select Name, MemberCount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $pgout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($pgroup in $privgrps)
		{
			if ($pgroup.MemberCount -ne 0)
			{
				$members = @()
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "$($pgroup.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following users are members of this privileged group." -Supress $true
				foreach ($member in $pgroup.members)
				{
					try
					{
						$user = $users | ?{ $_.distinguishedname -eq $member }
						
						
						if (($user | measure).count -ne 0)
						{
							if ($user.passwordlastset -eq $null)
							{
								$LS = $user.created
							}
							else
							{
								$LS = $user.passwordlastset
							}
							$ed = [datetime]::Now
							$PWAge = NEW-TIMESPAN -Start $LS -End $ed
							$obj = New-Object System.Management.Automation.PSObject
							$obj | Add-Member -MemberType NoteProperty -Name LogonID -Value $user.samaccountname
							$obj | Add-Member -MemberType NoteProperty -Name Name -Value $user.DisplayName
							$obj | Add-Member -MemberType NoteProperty -Name PWDAgeinDays -Value $PWAge.days
							$obj | Add-Member -MemberType NoteProperty -Name LastLoggedIn -Value $user.lastlogondate
							$obj | Add-Member -MemberType NoteProperty -Name PWDNoExpire -Value $user.passwordneverexpires
							$obj | Add-Member -MemberType NoteProperty -Name PWDReversable -Value $user.AllowReversiblePasswordEncryption
							$obj | Add-Member -MemberType NoteProperty -Name PWDNotRequired -Value $user.passwordnotrequired
							
							$members += $obj
						}
					}
					catch
					{ }
					
				}
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $members -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "USERS" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "User Statistics in the domain $($domain)." -Supress $true
		
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name TotalUsers -Value ($users | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name EnabledUsers -Value (($users | ?{ $_.enabled -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name DisabledUsers -Value (($users | ?{ $_.enabled -eq $false }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name LockedUsers -Value (($users | ?{ $_.lockedout -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiredUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -lt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiringUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -gt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDNeverExpiresUsers -Value (($users | ?{ $_.passwordneverexpires -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name CannotChangePWDUsers -Value (($users | ?{ $_.cannotchangepassword -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDExpiredUsers -Value (($users | ?{ $_.passwordexpired -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name NoPreAuthUsers -Value (($users | ?{ $_.doesnotrequirepreauth -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ReversableEncryptionUsers -Value (($users | ?{ $_.AllowReversiblePasswordEncryption -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name StaleUsers -Value (($users | ?{ $_.lastlogondatecalculated -lt [datetime]::Now.AddDays(-90) }) | measure).count
		
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $obj -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
	}
	Save-WordDocument -WordDocument $wordDoc -FilePath $wordfile
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>