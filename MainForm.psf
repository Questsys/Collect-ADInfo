<File version="3.1">
  <FileID>6802a47c-7f3f-4962-8e99-2399adb64a9f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAENhSURBVHhe7d1XbJxpvuf3AQzsHhgL+MLAXvjG
N+uFYcMXaxvwzXphY+1zFgt4z8ycOZNT93SYDtNR3ZJagZKoHClKpDIpUqREiknMYs4555xzDsVi
MUj6+XleimpKqu5Rd4/Yob6fwXdIVr31VrHIruf/UkXWjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwDdy5u/+7l/k/uQnP8k9evR4rr//0dxDRERE
9L3J//CxXD+/A7n/47/9t7lmXbf9df/yX/yLyo92fKr8yhY1D8yqxdTcP0NERPTDr2/GrHszahua
/1q1Ds492Vfb0Nxz579Yn+/D7s/7Nl9e+/CCufy04pIy9L/+u3+nx0v8l/vxP/44N6+iWVVdkypq
HFBOdZeyTVlVnco22Y/z6/tUYMqt6TJ1ExER/SDKq+1WdmWH4rJqFJtZ/ZWKyahWYl698s0+7PqY
kFPrdbu/lr2cvbzdj92f3a+37b4se/tzqrrU2D+r4MvXX2wAOHbsZG77yKLyqtv18aef6S9/eV97
9uzToUP+8tt/QDt37tbv//CKku7nqrprQvl1PWYY6H0mc5o9/cva3Pa587bux9v529Hm9Xs77yv2
1Oexud+tp32D/pb7IiIiFTb0KTqlTEnZNUrNq1PKVyi1oF6xaeVKMot2vFmA72VWKjW//sn5aQUN
yixtfaqM4uan92G2t5ezl7f7sfuz+31y/uN9ZBS3bOyvpEUZpq3Xk5pf59x++3lUdIwrr6T6xQYA
++/+w/OPdPrSTe3e5697JW2KK2jSvdI23TNXeDevQaHxWbp89bqKzB1V3DigkqZB87b/xXtyuYHH
72+et+V083FJ88Z+i56c/7dq4zo3b/fm/u3bZ0/7Rj33eW5+bt4+9y/Pua/NbbOX27jf7W3duJ82
enpfG9t/9eshIvLlCuv7FZVcah47+81A0Gs+fvGKzONwTrlZM+1R+P1KFZoj+M/P61dmeatCYzIV
etdk3t6Ivq+Y9FLn8bqw3vZ4X+Zy9vJxGVXKLmtzLuvsw2yXU9WhiHt5iryXr6yKdt2MzVJ0arHz
04LNfeSb211qLmM/j6rOcWXmlb7YAHD48LHcMZd0NSxKr+4+pf8tsEH/U2C1/tOdVv0vl2r1P5ys
1D+cKVRAYJBzhZUdo8orrVJCao4yy5qVW9GsoqZhVZmpo7JjTBXto877FW0jplFz2ri5QRMqqW9R
en6tytrtx2Zbs11F66jKmzqVlJKp+LRspRQ0qtxcpqJ9zNnG7qO8ddjZR6U5ze5vc7/OW3Paxnkb
11PZvmV7czvtNs71myrahlVs7qgyc512X87tbTenNfSaywwqt6zR+TyebG/2Yz+Xzf3b/doq2j6/
bZufn70u53rN51ne1P7487Tvdygp1XxuqVm6X9ZuJrPN67W37fF9Y05z9rv1czbn2fusrKnPfFMO
OdtWmNuYXVhm9pWrnOrex5ez98Hjz8dctqzZbN84+NS+N+4Dez/Zr83G9dv7YvPzISLy5cpMMWkV
5rGz31lInZ/cmuyBW5l5jN3MPt6WNA89Od9W1NBvBoB2JeWao/jsWhXUdJvT+5xKW0YUFBqnrKwC
1dU1qqqqTtXV9bp6I0qJuXXO/je3tZezl080+7EDgP0pb35tj9nHsK7dTlNkZKyycorld/Siysqq
FXwpTFGpJc5Bot0ur6bHOfCzn0d936yyC8pedAA4mjuxJIWE39WP3zmgvztVq38T06Z3mqb138a2
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
zXk0O9CiuIvxSk26rr2f7VTg5XsqTA/T3j3myPxSsqoL47XjL+/L/8hhpaWk69CBQzoXEaPEhFD5
++3RoSNhmjbf0e75Ad09fVfDyw81UJWtyPDbuh1yTf7HTys+NV6vv/EnffDxp4rKyFD87eva8emn
ioi7rTPXo9U3P6Wb/kcVkVQjz8qy1/uJiOj7HAMAPZd9sp0dAIKCgtTS0qLW1tYnxcbGOi8JbAeA
+bm5p34dcG52VnP2GfyLs+rp7tb04opWFqfV29OrybkFLc5Nqre3T1P22fmuBfWabcZn3VrzLKqv
p1tjU3POkwTtPufM99TC7Ix6eno07VrS0pzZp3l/atElt9l/f2+vxqZn5fG4NdTfraFx8/6S3WeP
JsxtsS9T7Nwmuy9zfYuLc5qZn5NrflrdvUNaHu/U4bMXVdY6oCXPujwLU+ru7tXconvjtxXM5Wcm
xjQ6Osn3NxH9IGMAoOeyL6M7MDCg8PBwRUREPFVISIgaGhqc1+Lf+lK+NvvSu87L6m6+FK/9Fbot
L8trX7rX5ZxuLmPa2MZe/vH7T37UvrFfu/2TbZ56f2FjP+Z7z25rf6vAZS9rTn96P+YbfPN9Z3+f
79Peztm5jZc+tk8k3Djdvm+GBdPG57P41L6IiH5I2cc7BgB6KnvUbBdG+9K/z74csD3yt4v/D+EP
AbG4E5EvxwBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAR
EZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEP
xgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBA
RETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETk
gzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEA
EBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER
+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAM
AERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERE
RD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4Y
AwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAR
EZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEP
xgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBA
RETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETkgzEAEBER+WAMAERERD4YAwAREZEPxgBARETk
g32jASAwMFAul+vJEEBERETfj+zaPfd1B4DbkRFmipjT7OyMM0UQERHR9ySzds9MTWhl/SsMAEeO
nshzmQu4Vx/KY97a6YGIiIi+fz2SVFLZ+GIDwEcff1xWXd+q/NJa5RZVOZMDERERff+yi39UdPyL
DQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGDTj370/wPfhdkDzv53xgAAAABJRU5ErkJggg==</Preview>
  <Form>2pdi1N2R60EAACODCAAAAAAABADtXGuTmlwS/m6V/8GaD/thTb0qqGhtMlUIKipeULx+2QIF5H4XpPbHbx90
EuemuMm8lUntJEcRuvt5TnefPhcn+ToWNWkb+I/5XKHw9fShEBwd6dvD7OgHkvnXUrV2duT/1bE9
8/T6pfDWoy+FheT5qm19q/5VRn++FKjQCEJP+mZJYeAJxpfCJBQNdTuQjrytS9Y3kSCE2rZWrzTx
qlRuNB8KlmAC8lBQrcpDYbtXjZ0Hcg+UbQWebfgPKU0gOvFsR/KC41mBDAN7thUMiVZNyUIkQLT+
pVDBv5aeRG+pDu2d9PDYAaRsOmoC4rwXSjfFKUOVrOCk0GwQXwo40biphHzasr2d5M2Co4GYqbG0
w+mbir2tbT35CZ62VEvwjo8kSbZIsk32KLiC9y5J2TRcdRR4odALmb5w5NPz049CRuTLn3zu9E6X
zj+rSnOH7azNhC832Vk5uKvlcxklkXVAEQFNLv34KUqWU+20uDmiNMznqMge01z5l7R87sWdIVhH
OIC3BFwCEQBqvXaL5IRua1cWMLOvMNibLZ9778l9rQIoupDPdVtbwOUBv38QsQYKcX27LI72vS6r
WMWebIXofbxfD6ZqbzlXq+pKs0NBX9e3Rr8rG7WZajqSYW1cI5+zNiH6hO7u4CmSQtJIC2lPwMow
tYqnVgGlA2gpKqA3R/y8PKLJYyqbz+3XfUJYqMONNltuaXMn0XVDKZuO2lYPWhmrGJVBw+4QpNNJ
Oq7JsP7SG/qm13UxlnQWWNNe1EFmfNDbdSefU9umsW+7O4mvI2ujjbZoCIY6OfVsDrgx4FcgS3yO
jurA2RwpFrZdRZgrcFR5x1F1OaJJVZFb+ZzG0W09ohmTpFmblFmbo4cOSY+diEcNXaN70GTGPMm2
QIdUIwmsgDWFQlaRdcg3xToCng64tXOmIg7Ftd7DpvsVpq05Ct9FNL1X6L4OKGBxapP0wonotafQ
QkDSu5Cj1UghlHzuENHKQaGlw+muCE+R1MIlQYtLtQeA1d5HVFUiKX2tULM94wJaGVCfRp8/bZPF
bT4HcVyoa8racFRTBnxNocdGRM+sKMXfeBG9DRRA5GgtihiccFdWQormkaP1OEKc0mdIZpPPgfTS
OWkjK2CNKipQRzYRtVAZDHKqDbgXHFqUYvaXa603dgSOIRWFZoH7xFRoPp+zI2blRrToR7QcRgif
tY7RhGg2ab+ieG45Yv3KNDGPCq3FJCuDR07eIOm5QzLICqsrdGtPUl4+J0TdtVrtAt4ccFuXHHSr
b4paVQq2XNLaQ6whnpxF0itXSTaewuyCiNlHJGseo5JXjqxmPldsenF1xkR4zNYa9cQpczz4pYSk
diHJgN8Q92RqgTWDRLGlDtvoKGr2DND0SwazfK497Vp2H5P0qusJEU1BJowMyAJLQVFgBJ+kpVMG
0MCBDbAp0yhu2Up9hpfrLatRHFrgkQkwYNV8DqSQNNJauiSDrCBrKCN8kaMk3ZYArTxrTzvfOQAD
zxl094aNPWMAo15JrTxx0MA6wonw2YFo9kWc0Fmc4OlGkSUCjBSthGMhUhAxyFzIc6SL8mFkKHQb
xilJBcBhb6xdwGtfcuDb++7BHSx1cwOjB3E4+Q75EHkB5aIUkuAFDrygTOJ8rtoG/KWGER2xUtdl
oikwAdZiwEcTJPXdC6D95AX67AXd7GGANgfUzvdZBnEYJN7Ataz+LNwqOK2S4sqdeaKv4uohwbWI
B2yacZKEdcsz61jFVseqVsLqODBYWvA+CTFtFeRzWHviV+aWk+iaeWyLRmywu0CTeXt/QNkQbSPM
MmtdQLMBtf/DC/EA8weYa9UkRyBR9rJQLU3SW7otbxeoCXDwrKTthViHKNdsOakxK7/S4iv1FVGu
M2KE816EL2isXiOcRAPOx0QK4sPahZhZ0Qoqkh6xLSUCL0OdspwZ4JUB9zuHeTse1wN2ENhOaG8U
qqSQLIxlFmLITq2IXzgKu/Y4lOliJZ+r1ZikiicwNoFPdQKcwD+xWK6tiLjam5zGJAdjMs1oZAUq
A1RLqAwOVIbA3kiA1gPU0fe5PuVQDFkhcpy6tSG7RVnheyrUXj3iOTMSeZvjIbd4iK+Y1PqTpFpl
IOZJUuutoE30KCrV87mGiCJQglGMpNmZzaG6wKIqw6gcVZQ5qE4cdXD6IaCtUw5nBotOi28dWDdx
ha4r7CkY9VKkdVVSG+ikNbWmMvTmAJXmACMdj/B1qVzbTKRwz5drffBIlZDDeFVrbL39QcWRDJJF
OqCrDSAKJLImNKVo7AlK/ejUCMCzAXd6yaETsXXMGyyNNTlrSFzS2XNJTyMT8AQ+NkmoMUqSVsvE
jCtaXN14MFKIY7Vnxbgto2s9blsrd8/wdpRKwxyRaiMrYO3YlJSjueaWFddlAK26yOeecZiu+vFw
UPPqKnCQGlKLaSt7hlGnzECL2aHRYsbmFEbYFKoEBSwwdunEUCF6hwNmy2ANPs2dFuDH/NTaQwT2
zNAAbb3FIittJe42JaiBa0Wqei4PaD1AXTwxWAKD0XEoNHw3NPO5teI2pL1FK1Oru4+tvtayWH1q
jYypNTGBhbU/zOyWxdtTK6xUD35lLaPrmRWnzwAdZPepDqy4tJMVsGY2pdi0N2RI+IIGeOvlMw57
EbzmlgK37omtsCgf2bZyZDt7FbJpVhpoxwkaWcfJ2DjyM5tmOGu2mlrqyi2vPTtZ0+ga3UPPkMzQ
oCZIC2kjK+09xZLycRCI+7AYDA5cPpcMbcDdPHFYAYd5eUhQoTiwN/GktafwrjrDGVXFe+oR72sq
zuoqPjRmkBkUPjFn0I64EeO4BvPCikGf0F30FEkhaaSFtJEVBqxR+xmsiaZ8K6gTgFZdPWMQi+vK
iO3AOgSCLEAU1MTr67TH6vxF07yRwXtjI/HGJu9NTM1buQYolHF0je6NTTqVGYIsjPoLbWStrSYw
E8ZeO/QYwOsB7iUHWcRGYi9iTVuIS7Te9npG2xsYuscaZQ+igF6fmtk+t7k3MvW0oevv9y9k2bTp
Xt+Ye2197rrijO5BTwkR8NaAu3visAYOMj7ydthICOX52N/OpGg3c+Pd0a3I/OwoUW5ybpiszeA9
RK0MNUQtlqE93Tk/TSWRVqoNVqKd6iKroaxPAGUFaPb6zEBcVvw+xVmwGsQDXKuOSireJITyUN4k
DV5IGqs3W3n4dnt6Dvn2XGNz0pI1sI5QFDwoA64B+KFm14doY0gpDBES44NTC1d2TfrRYF6Qnt/5
iQYrfLAPOCHgoR0FBfgTvFnazmGjteq0xhO1N6sFLEsdxAMT+QwbN9B4PSzKO3pTCVYS1vRQH2Ba
5WE1WJesCHjHRJHw66GHMGABSMsgJVSa4qIcMNNkexgeh3IvarD0wTvWA3E8Ve35qjPlAJUHdLTL
bDbyOZlJ98D1Ed9vbLH6QFlhvGpLaA8Fe6cwdGCh5g8IMvS0PlhDlgXghPjogLrFRjKf+Pgg3k5g
9xESZtX3KFidCKZVO+6MzXih9UzYWzWLOwZQNOT5VkNmkqctLtY8bGCD2z7vPOcTWkGr/Sqs39pk
A1ZZJKwx0Aw7hBmFg9o6h7qCMnq77raUDTTIrS2MdFTz5kgGySId0IU/sHkFa7AOAbvnnXQL3hjA
FS922iWiWAph11vbLBfGr9vXv2xg3UR7a0A7nIEb388cfs3Px1v79u1r6Xz0cj6muXVugw69hpIV
zgJPdS4OcKaSLHmStZXOcuCb0EcylYdCKbtxT1Gth0fsS+H896bKCF4fHtOjuJuy6GyrC5TOR1WM
urt9KsZLcfDwiE4gDKlA29sQOhYIgWpbBcHaFaaSY3vB+aTxtbH2AaTPllhb2J2Z/htdfy2lT59E
bx9qUntpq7fs+MMPNrcISLRj6M0u3Eo93w8l/9TTa8edr53H2tvUVRBRPD3nJF656L2IXuGQwcbp
FLPSwCGFqhnkeUHsWTspfnjMwvCUE2dmhRO1QmZuc1+ibNMBx4iGhExNJYD2VEt556D2TRML1Q8F
I83klrDVKduwvfcOekun3PqNMw06xIETA16CcSYE0s+lWfn+NHtJIHuO4cTdOVbPnGNAq5DyKtxB
7P8J9jrBaE+IoEeqTauC4gmm/1MZRtyfYK8IfGiG1TJnGOJVSIkV7mD2CVKsFQaBbX14gokpDEk/
LQ3A6M/NlBWYs9744u29/HoXP3t+EQ3Ir9dfQV7Lr0zZmOYXSRcuqP3Gs+SL1RoFwdevuPffqcCL
NdzdSYo69reUwdCL9J3q/c9JWatmrEHnqnfGy6AwlYTd2DKOmcN6ylq8WgNG5buy9o2v2e+OGCuI
kvHh8TIQChV6EKhgaXs6pD2tekDtvgDe+A2AW2UIy16G3iV8xzQHAa1kWn5/D+jr7eF7ZehMrXDm
VjiRs73jR5Si3zqrrv7GyuvOQ+GDMjhVlX2WUP7Inxp2X8U4ccucLdU65Cdeu29VlMX8KV0ys/kb
cuP7acuH58flmc09OdIDUhePQQDduTrv2baR9gl1Dgl/XN8uaL1xTCWrELaXZH6cWJ0ihu59yt7Z
DhqM/p/bQVK0w+C+7t1VxYBxliXGqYT9GD6Zy1j6e3Z37u0yrXnSKnaF0LMy9PxDhlXr3xf+q8P0
nSNbGj7SdmS9KEu/aVa/ymlLihhJMIJ9ekhyNblfpvYn6aEUq9cH7bN+ZfwK4M0UyfSVAGwMiDf3
Em+Pqn8IpvOvDqC9kP/9R9GtzLrq3xvKGT1dwZCrb3+tc+Fq9F1JgRYC4frXK+cN+w2ar7ftv3/Y
3h4uV4P1psrHhagNcJmi8yavzxiTd1dWf+ac5HhPN64vJj/phHQQDHUnBOgfV4TGn9lFwXFAN13W
ApAqn69/+TT83sDIWHzqlXtn4vEJ8NNNxu9sXf7M+iGknd2rPvkjDf/EUeaHDvpy4JePqreTJeOY
qmH3jqkU7tONqKuT1FX3XtPMumpq3r1qmvxAzbR4usbyM66hbs66V2N2S/vj4rY4IxfO0JmCd4vu
Zwxg5jXF1UBmtfJxAb2YlAqHCwqZApuV/qcMcKZp+3p0s5jIHNrGHaFNJ7FCGmCEX7iMcrbIZqH+
GcP67irlaiTf0/qQ4KVhm50QMwXrPXY/H5+xI1nouI9WBcNW/oaTBclCZ5m7FK7y7v8lsNu14+D0
vwg8PHYEw7/9u8y0JAvAqo0cnKjO7X/cDzSednXPSGXRDCTv4XGjOgVkxf/PP/96jXgRiadL//G/
0pXdgutBAAA=</Form>
  <Code><![CDATA[
$Main1_Load={
	#TODO: Initialize Form Controls here
	$label1.Text = "Message Center"
	
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion








$aboutThisApplicationToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-About_psf
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	[Environment]::Exit(0)
	
	
}

$newHealthCheckToolStripMenuItem_Click={
	#TODO: Place custom script here
	# Load Data
	#get target directory
	
	$openfiledialog1.Multiselect = $false
	$openfiledialog1.DefaultExt = ".zip"
	$openfiledialog1.Title = "Open Customer Zip File"
	
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		write-message "Loading New Data"
		$zipfile = $openfiledialog1.filename
		#unzip file to target directory 
		write-message "Expanding Zip"
		$dir = Split-Path -Path $zipfile
		Expand-Archive -Path $zipfile -DestinationPath $dir
		write-message "Zip Expansion Complete"
		$curwkdir.Text = $dir
	}
	
}

$supportToolStripMenuItem_Click={
	#TODO: Place custom script here
	#open Outlook and create email support request
	#$ol = New-Object -comObject Outlook.Application
	
	if (([System.Diagnostics.Process]::GetProcessesByName("OUTLOOK")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Outlook.Application")
	}
	else
	{
		$ol = New-Object -comObject Outlook.Application
	}
	
	#Create the new email
	$mail = $ol.CreateItem(0)
	
	#Optional, set the subject
	$mail.Subject = "Support request for Quest Documentation and Report application."
	
	$body = Show-Inputbox -message "Please enter the support request in detail" -title "Support Request Detail"
	#Optional, set the body
	$mail.Body = $body
	
	#set the to address
	$null = $mail.recipients.add("gary_cook@questsys.com")
	
	#Get the new email object
	$inspector = $mail.GetInspector
	
	#Bring the message window to the front
	$inspector.Display()
}

$applicationVerificationToolStripMenuItem_Click={
	#TODO: Place custom script here
	if (([System.Diagnostics.Process]::GetProcessesByName("Visio")).length -gt 0)
	{
		$ol = [Runtime.InteropServices.Marshal]::GetActiveObject("Visio.Application")
		$noexitvisio = $true
	}
	else
	{
		$ol = New-Object -comObject Visio.Application
		$ol.visible = $false
		$noexitvisio = $false
	}
	if (($ol | measure).count -gt 0)
	{
		$visioloaded = $true
		[System.Windows.MessageBox]::Show('Visio is Available', 'Visio Status', 'Ok', 'Information')
	}
	else
	{
		$visioloaded = $false
		[System.Windows.MessageBox]::Show('Visio is NOT Available', 'Visio Status', 'Ok', 'Error')
	}
	if ($noexitvisio -eq $false)
	{
		$ol.quit()
	}
}

$preferencesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-Prefs_psf
}

$validateModulesToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-ValMod_psf
}

$buttonADDocumentionReport_Click={
	#TODO: Place custom script here
	#New section for Version 2 adding visio diagrams and switch to using installed word object instead of pswriteword module
	
	if ($checkboxDrawVisioDiagrams.Checked -eq $true)
	{
		#call draw visio diagrams
		#draw 3 diagrams
		#1.	Forest and all domains
		#2.	Each Domain and all domain controllers
		#3.	The sites and services visualation with all site connectors and site bridges
		
	}
	
	
	
	
	#start Ad Word Documentation fist run is load all data then break out for the old script
	#need to revise this for new documentation
	
	#load all data
	$forest = Import-Clixml -Path "$($curwkdir.text)\forest.xml"
	$schout = Import-Clixml -Path "$($curwkdir.text)\schema.xml"
	$optfull = Import-Clixml -Path "$($curwkdir.text)\optionalfeatures.xml"
	$trusts = Import-Clixml -Path "$($curwkdir.text)\trusts.xml"
	$adsites = Import-Clixml -Path "$($curwkdir.text)\sites.xml"
	$sitelink = Import-Clixml -Path "$($curwkdir.text)\sitelink.xml"
	$sitelinkbridge = Import-Clixml -Path "$($curwkdir.text)\sitelinkbridge.xml"
	$domains = Import-Clixml -Path "$($curwkdir.text)\domains.xml"
	$alldcs = Import-Clixml -Path "$($curwkdir.text)\domaincontrollers.xml"
	$dcdns = Import-Clixml -Path "$($curwkdir.text)\dns.xml"
	$AllDNSZones = Import-Clixml -Path "$($curwkdir.text)\dnszone.xml"
	$AllADPassPol = Import-Clixml -Path "$($curwkdir.text)\DomainPasswordPolicy.xml"
	$AllADFGPassPol = Import-Clixml -Path "$($curwkdir.text)\FineGrainedPasswordPolicy.xml"
	$AllGPO = Import-Clixml -Path "$($curwkdir.text)\GPOs.xml"
	$Allous = Import-Clixml -Path "$($curwkdir.text)\OUs.xml"
	$Allusers = Import-Clixml -Path "$($curwkdir.text)\Users.xml"
	$Allgroups = Import-Clixml -Path "$($curwkdir.text)\groups.xml"
	
	
	#check visio checkbox and draw visio diagrams if checked
	if ($checkboxDrawVisioDiagrams.Checked -eq $true)
	{
		#open visio 
	}
	
	
	
	#load data and build word document
	$template = "$($curwkdir.text)\ADTemplate.docx"
	$wordfile = "$($curwkdir.text)\AD Document Deliverable.docx"
	$wordDoc = get-WordDocument -filepath $template
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD ASSESSMENT OVERVIEW" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was Tasked with performing and Active Directory assessment for your company.  This deliverable was produced with the results of our script-based investigation of your AD Environment.  Quest used a custom script developed in house to capture your current configuration, health, and performance information." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ASSESSMENT STRUCTURE" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "This deliverable is broken into 3 main sections." -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$ListOfItems = @('Overview of the current configuration of Active Directory', 'Forest', 'Domains', 'Sites', 'Features', 'AD object reports covering Users, Groups, Computers, and GPOs.')
	$OverrideLevels = @(0, 1, 1, 1, 1, 0)
	$paragraph = Add-WordList -WordDocument $wordDoc -ListType Numbered -ListData $ListOfItems -ListLevels $OverrideLevels -Supress $true
	#$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $True # Empty Line
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "ACTIVE DIRECTORY CONFIGURATION" -HeadingType Heading1 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "FOREST" -HeadingType Heading2 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "CONFIGURATION" -HeadingType Heading3 -Supress $true
	
	$forest.forestmode = $forest.forestmode.value
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the forest $($forest.name) and pull the configuration contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $forest -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SCHEMA" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Schema for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $schout -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	
	$optout = $optfull | select Name, Created, featureGUID, featurescope, enabledscopes, modified, protectedfromaccidentaldeletion, required*
	
	$otpfeatures = $optfull | select name, created, modified
	$optfword = @()
	foreach ($opt in $optfull)
	{
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name Feature -Value $opt.name
		$obj | Add-Member -MemberType NoteProperty -Name Created -Value $opt.created
		$obj | Add-Member -MemberType NoteProperty -Name Modified -Value $opt.Modified
		$optfword += $obj
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "OPTIONAL FEATURES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Optional Features for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $optfword -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	foreach ($opt in $optout)
	{
		$paragraph = Add-WordParagraph -WordDocument $wordDoc -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the Optional Feature $($opt.name)." -Supress $true
		#correct required forest mode
		$opt.requiredforestmode = $opt.requiredforestmode.value
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $opt -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	
	if (($trusts | measure).count -eq 0)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) The forest contained no Trusts." -Supress $true
	}
	else
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "TRUSTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Trusts for Forest $($forest.name) and pull the Information contained in the table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $trusts -Design MediumShading1Accent5 -Transpose -Supress $true -AutoFit Window
	}
	
	$SoutWord = $ADSites | select name, domains
	
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITES" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($Site in $ADSites)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site $($Site.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $site -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	
	if (($sitelink | measure).count -eq 1)
	{
		$SLoutWord = $sitelink | select name, cost, ReplicationFrequencyInMinutes, sitesincluded
	}
	else
	{
		$SLoutWord = $sitelink | select name, cost, ReplicationFrequencyInMinutes, @{ Name = "SitesIncluded"; expression = { [string]::Join(";", ($_.sitesincluded)) } }
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINKS" -HeadingType Heading3 -Supress $true
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SloutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
	
	ForEach ($link in $sitelink)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link $($link.name) contains the following details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $link -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
	}
	
	
	if (($sitelinkbridge | measure).count -ne 0)
	{
		$SLBoutWord = $sitelinkbridge | select name, sitelinksincluded
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name) and compile the Information in the section below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $SLBoutWord -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		ForEach ($bridge in $sitelinkbridge)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "The site link bridge $($bridge.name) contains the following details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $bridge -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
	}
	else
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "SITE LINK BRIDGES" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to read the Site Link Bridge Information for Forest $($forest.name).  There are no site link bridges in the forest." -Supress $true
	}
	
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAINS" -HeadingType Heading2 -Supress $true
	
	$adm = $domains | select netbiosname, dnsroot, domainmode
	$adm | Add-Member -MemberType NoteProperty -Name ForestRoot -Value $false
	if ($adm.parentdomain -eq $null)
	{
		$adm.ForestRoot = $true
	}
	
	$adm.domainmode = $adm.domainmode.value
	$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest Discovered the following list of domains in the forest $($forest.name) and will detail each in a section section." -Supress $true
	$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $adm -Design MediumShading1Accent5 -AutoFit Window -MaximumColumns 7
	foreach ($domain in $domains)
	{
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN: $($domain)" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest was able to pull information from the domain $($domain) and compile it into the following table below." -Supress $true
		$domain.domainmode = $domain.domainmode.value
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $domain -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
		$dcs = $alldcs |?{ $_.domain -eq $domain.dnsroot }
		$tempdc = $dcs | select name, domain, enabled, isglobalcatalog, isreadonly, site
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following details the domain controllers in the domain $($domain).  Each Domain Controller is broken out into its own section." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempdc -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
		
		foreach ($dc in $dcs)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN CONTROLLER: $($dc.name)" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) details." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dc -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			
			$dns = $dcdns | ?{$_.computername -eq $dc.hostname}
			if (($dns | measure).count -ne 0)
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $dns -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			else
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "Domain Controller $($dc.name) DNS Server details." -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "This Domain Controller is not a DNS Server." -Supress $true
			}
			
			
			
			
		}
		
		$DNSZones = $AllDNSZones | ?{ $_.domain -eq $domain.dnsroot }
		$DNSZOut = $DNSZones | select ZoneName, ZoneType, replicationscope, IsDSIntegrated, IsReverseLookupZone, IsAutoCreated
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN DNS ZONES" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following DNS Zones for the domain $($domain).  Details are included in the table below." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $DNSZout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 6
		
		
		$ADPassPol = $AllADPassPol | ?{ $_.domain -eq $domain.dnsroot }
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN PASSWORD POLICY" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following default password policy for the domain $($domain)and below is a table of the details." -Supress $true
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ADPassPol -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
		
		$ADFGPassPol = $AllADFGPassPol | ?{ $_.domain -eq $domain.dnsroot }
		if (($ADFGPassPol | measure).count -ne 0)
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the following Fine Grained password policy for the domain $($domain) and below is a Summary table With detail tables of each policy to follow." -Supress $true
			$tempfgp = $ADFGPassPol | select Name, Description, Precedence, Appliesto
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $tempfgp -Design MediumShading1Accent5 -Supress $true -AutoFit Window
			foreach ($FGP in $ADFGPassPol)
			{
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FGP Policy $($FGP.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The deatils of the FGP Policy $($FGP.name) are contained in the table below." -Supress $true
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $FGP -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
			}
			
		}
		else
		{
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "DOMAIN FINE GRAINED PASSWORD POLICY" -HeadingType Heading4 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Quest dicovered the domain $($domain) contains no fine grained password policies." -Supress $true
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "AD OBJECTS" -HeadingType Heading3 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the information on AD object in the domain $($domain).  The objects contained in the section include OUs,Users, Groups, Group Policy Objects, and Printers." -Supress $true
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUP POLICY OBJECTS (GPO)" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "This section details out the GPOs in the domain $($domain)." -Supress $true
		
		
		$GPO = $AllGPO | ?{ $_.domainname -eq $domain.dnsroot }
		$gpoout = $GPO | select displayname, gpostatus, creationtime
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gpoout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($gp in $GPO)
		{
			
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "GPO - $($gp.displayname)" -HeadingType Heading5 -Supress $true
			$paragraph = Add-WordText -WordDocument $wordDoc -Text "Details of the GPO $($gp.displayname)." -Supress $true
			$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gp -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "ORGANIZATIONAL UNITS (OU)" -HeadingType Heading4 -Supress $true
		
		$ous = $Allous | ?{ $_.domain -eq $domain.dnsroot }
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Summary of OUs in the domain $($domain)." -Supress $true
		$ouout = $ous | select Name, Created, Protectedfromaccidentaldeletion, linkedgrouppolicyobjects, usercount, computercount, groupcount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $ouout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
		
		#load users becasue groups rely on it
		
		$users = $Allusers | ?{ $_.domain -eq $domain.dnsroot }
				
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "GROUPS" -HeadingType Heading4 -Supress $true
		$privGroups = @("Account Operators", "Backup Operators", "Print Operators", "Server Operators", "Cert Publishers", "Enterprise Admins", "Domain Admins", "Administrators", "Schema Admins")
		
		
		$groups = $Allgroups | ?{ $_.domain -eq $domain.dnsroot }
		$totalGP = ($groups | measure).count
		$BI = 0
		$US = 0
		$UD = 0
		$GS = 0
		$GD = 0
		$LS = 0
		$LD = 0
		foreach ($grp in $groups)
		{
			if ($grp.isCriticalSystemObject -eq $true)
			{
				$BI += 1
			}
			else
			{
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'Global')
				{
					$GS += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'Global')
				{
					$GD += 1
				}
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'DomainLocal')
				{
					$LS += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'DomainLocal')
				{
					$LD += 1
				}
				if ($grp.groupcategory.value -eq 'Security' -and $grp.groupscope.value -eq 'Universal')
				{
					$US += 1
				}
				if ($grp.groupcategory.value -eq 'Distribution' -and $grp.groupscope.value -eq 'Universal')
				{
					$UD += 1
				}
			}
			
		}
		
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Group Statistics in the domain $($domain)." -Supress $true
		$gout = @{ }
		$gout.Add("Total Groups", $totalgp)
		$gout.Add("Built-In", $BI)
		$gout.Add("Universal Security", $US)
		$gout.Add("Universal Distribution", $UD)
		$gout.Add("Global Security", $GS)
		$gout.Add("Global Distribution", $GD)
		$gout.Add("Domain Local Security", $LS)
		$gout.Add("Domain Local Distribution", $LD)
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $gout -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 8
		$privgrps = @()
		foreach ($grp in $groups)
		{
			foreach ($pgrp in $privGroups)
			{
				if ($grp.name -eq $pgrp)
				{
					$grp | Add-Member -MemberType NoteProperty -Name MemberCount -Value (count-groupusers -group $grp.distinguishedname) -Force
					$privgrps += $grp
					
				}
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "Privileged Group Statistics in the domain $($domain)." -Supress $true
		$pgout = $privgrps | select Name, MemberCount
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $pgout -Design MediumShading1Accent5 -Supress $true -AutoFit Window
		
		foreach ($pgroup in $privgrps)
		{
			if ($pgroup.MemberCount -ne 0)
			{
				$members = @()
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "$($pgroup.name)" -HeadingType Heading5 -Supress $true
				$paragraph = Add-WordText -WordDocument $wordDoc -Text "The following users are members of this privileged group." -Supress $true
				foreach ($member in $pgroup.members)
				{
					try
					{
						$user = $users | ?{ $_.distinguishedname -eq $member }
						
						
						if (($user | measure).count -ne 0)
						{
							if ($user.passwordlastset -eq $null)
							{
								$LS = $user.created
							}
							else
							{
								$LS = $user.passwordlastset
							}
							$ed = [datetime]::Now
							$PWAge = NEW-TIMESPAN -Start $LS -End $ed
							$obj = New-Object System.Management.Automation.PSObject
							$obj | Add-Member -MemberType NoteProperty -Name LogonID -Value $user.samaccountname
							$obj | Add-Member -MemberType NoteProperty -Name Name -Value $user.DisplayName
							$obj | Add-Member -MemberType NoteProperty -Name PWDAgeinDays -Value $PWAge.days
							$obj | Add-Member -MemberType NoteProperty -Name LastLoggedIn -Value $user.lastlogondate
							$obj | Add-Member -MemberType NoteProperty -Name PWDNoExpire -Value $user.passwordneverexpires
							$obj | Add-Member -MemberType NoteProperty -Name PWDReversable -Value $user.AllowReversiblePasswordEncryption
							$obj | Add-Member -MemberType NoteProperty -Name PWDNotRequired -Value $user.passwordnotrequired
							
							$members += $obj
						}
					}
					catch
					{ }
					
				}
				$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $members -Design MediumShading1Accent5 -Supress $true -AutoFit Window -MaximumColumns 7
			}
		}
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "USERS" -HeadingType Heading4 -Supress $true
		$paragraph = Add-WordText -WordDocument $wordDoc -Text "User Statistics in the domain $($domain)." -Supress $true
		
		$obj = New-Object System.Management.Automation.PSObject
		$obj | Add-Member -MemberType NoteProperty -Name TotalUsers -Value ($users | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name EnabledUsers -Value (($users | ?{ $_.enabled -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name DisabledUsers -Value (($users | ?{ $_.enabled -eq $false }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name LockedUsers -Value (($users | ?{ $_.lockedout -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiredUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -lt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ExpiringUsers -Value (($users | ?{ $_.accountexpirationdate -ne $null -and $_.accountexpirationdate -gt [datetime]::Now }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDNeverExpiresUsers -Value (($users | ?{ $_.passwordneverexpires -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name CannotChangePWDUsers -Value (($users | ?{ $_.cannotchangepassword -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name PWDExpiredUsers -Value (($users | ?{ $_.passwordexpired -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name NoPreAuthUsers -Value (($users | ?{ $_.doesnotrequirepreauth -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name ReversableEncryptionUsers -Value (($users | ?{ $_.AllowReversiblePasswordEncryption -eq $true }) | measure).count
		$obj | Add-Member -MemberType NoteProperty -Name StaleUsers -Value (($users | ?{ $_.lastlogondatecalculated -lt [datetime]::Now.AddDays(-90) }) | measure).count
		
		$paragraph = Add-WordTable -WordDocument $wordDoc -DataTable $obj -Design MediumShading1Accent5 -transpose -Supress $true -AutoFit Window
		
	}
	Save-WordDocument -WordDocument $wordDoc -FilePath $wordfile
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>